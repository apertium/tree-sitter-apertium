=============
agreement.rtx
=============

n: _.gender.number;
adj: _.gender.number;
NP: _;

gender = m f mf;
number = sg pl sp;

NP -> adj n {2 _ 1[number=2.number]};

---

(source_file
  (output_rule
    pos: (ident)
    (colon)
    (ident) (ident) (ident))
  (output_rule
    pos: (ident)
    (colon)
    (ident) (ident) (ident))
  (output_rule
    pos: (ident)
    (colon)
    (ident))
  (attr_rule
    name: (ident)
    (ident) (ident) (ident))
  (attr_rule
    name: (ident)
    (ident) (ident) (ident))
  (reduce_rule_group
    (ident)
    (arrow)
    (reduce_rule
      pattern: (pattern_element pos: (ident))
      pattern: (pattern_element pos: (ident))
      output: (reduce_output
        (output_element (num))
        (blank)
        (output_element
          (num)
          (output_var_set
            (set_var name: (ident) value: (clip pos: (num) attr: (ident)))))))))

========
negation
========

a: (if (not ( 1.b = "hi" ) ) 1(c));

---

(source_file
  (output_rule
    pos: (ident) (colon)
    (lu_cond
      (choice
        type: (if_tok)
        cond: (condition
          (not)
          (clip pos: (num) attr: (ident))
          (str_op (str_op_eq))
          (string))
        value: (output_element
          (num)
          (macro_name
            (ident)))))))

==================
empty attr default
==================

x = (y "") z q ;

---

(source_file
  (attr_rule
    (ident)
    (attr_default (ident) (string))
    (ident)
    (ident)))

===========
quoted tags
===========

X -> xyz@abc."aâ†’b" { 1 } ;

---

(source_file
  (reduce_rule_group
    (ident)
    (arrow)
    (reduce_rule
      pattern: (pattern_element
        lemma: (ident)
        pos: (ident) (string))
      output: (reduce_output (output_element (num))))))

============
conditionals
============

adj: (always
       1(adj_plain)[gender=(if (1.defnes = def or 1.number = pl) un
              elif (1.gender = f or 1.gender = m) mf
              else 1.gender),
              number=(if (1.defnes = def) sp else 1.number)]);

---

(source_file
  (output_rule
    pos: (ident)
    (colon)
    (lu_cond
      (choice
        type: (always_tok)
        value: (output_element
          (num)
          (macro_name (ident))
          (output_var_set
            (set_var
              name: (ident)
              value: (string_cond
                (choice
                  type: (if_tok)
                  cond: (condition
                    (clip pos: (num) attr: (ident))
                    (str_op (str_op_eq))
                    (clip val: (ident))
                    (or)
                    (clip pos: (num) attr: (ident))
                    (str_op (str_op_eq))
                    (clip val: (ident)))
                  value: (clip val: (ident)))
                (choice
                  type: (elif_tok)
                  cond: (condition
                    (clip pos: (num) attr: (ident))
                    (str_op (str_op_eq))
                    (clip val: (ident))
                    (or)
                    (clip pos: (num) attr: (ident))
                    (str_op (str_op_eq))
                    (clip val: (ident)))
                  value: (clip val: (ident)))
                (choice
                  type: (else_tok)
                  value: (clip pos: (num) attr: (ident)))))
            (set_var
              name: (ident)
              value: (string_cond
                (choice
                  type: (if_tok)
                  cond: (condition
                    (clip pos: (num) attr: (ident))
                    (str_op (str_op_eq))
                    (clip val: (ident)))
                  value: (clip val: (ident)))
                (choice
                  type: (else_tok)
                  value: (clip pos: (num) attr: (ident)))))))))))
