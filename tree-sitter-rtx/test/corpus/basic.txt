=============
agreement.rtx
=============

n: _.gender.number;
adj: _.gender.number;
NP: _;

gender = m f mf;
number = sg pl sp;

NP -> adj n {2 _ 1[number=2.number]};

---

(source_file
  (output_rule
    pos: (ident)
    (colon)
    (ident) (ident) (ident))
  (output_rule
    pos: (ident)
    (colon)
    (ident) (ident) (ident))
  (output_rule
    pos: (ident)
    (colon)
    (ident))
  (attr_rule
    name: (ident)
    (ident) (ident) (ident))
  (attr_rule
    name: (ident)
    (ident) (ident) (ident))
  (reduce_rule_group
    (ident)
    (arrow)
    (reduce_rule
      pattern: (pattern_element (ident)) pattern: (pattern_element (ident))
      output: (reduce_output
        (output_element (num))
        (blank)
        (output_element
          (num)
          (output_var_set
            (set_var name: (ident) value: (clip pos: (num) attr: (ident)))))))))

========
negation
========

a: (if (not ( 1.b = "hi" ) ) 1(c));

---

(source_file
  (output_rule
    pos: (ident) (colon)
    (lu_cond
      (choice
        type: (if_tok)
        cond: (condition
          (not)
          (clip pos: (num) attr: (ident))
          (str_op)
          (string))
        value: (output_element
          (num)
          (macro_name
            (ident)))))))

==================
empty attr default
==================

x = (y "") z q ;

---

(source_file
  (attr_rule
    (ident)
    (attr_default (ident) (string))
    (ident)
    (ident)))

===========
quoted tags
===========

X -> xyz@abc."aâ†’b" { 1 } ;

---

(source_file
  (reduce_rule_group
    (ident)
    (arrow)
    (reduce_rule
      pattern: (pattern_element
        lemma: (ident)
        (ident) (string))
      output: (reduce_output (output_element (num))))))
